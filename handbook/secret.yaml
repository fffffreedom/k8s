# secret

用来保存少量敏感信息，such as password, a token, or a key

## Built-in Secrets

Service Accounts Automatically Create and Attach Secrets with API Credentials

Kubernetes automatically creates secrets which contain credentials for accessing the API 
and it automatically modifies your pods to use this type of secret.

The automatic creation and use of API credentials can be disabled or overridden if desired. 
However, if all you need to do is securely access the apiserver, this is the recommended workflow.

## Creating your own Secrets（自动创建）

Creating a Secret Using kubectl create secret

```
# Create files needed for rest of example.
echo -n 'admin' > ./username.txt
echo -n '1f2d1e2e67df' > ./password.txt
```

```
kubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt
```

**特殊字符，如果直接用在命令行中，需要进行转义，若是保存在文件中，则不用转义！**

## Creating a Secret Manually

```
echo -n 'admin' | base64
YWRtaW4=
echo -n '1f2d1e2e67df' | base64
MWYyZDFlMmU2N2Rm
```

Write a Secret's yaml file

```
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm
```

then, kubectl apply -f ./secret.yaml

For certain scenarios, you may wish to use the stringData field instead. 
This field allows you to put a non-base64 encoded string directly into the Secret, 
and **the string will be encoded for you when the Secret is created or updated.**

```
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
stringData:
  config.yaml: |-
    apiUrl: "https://my.api.com/api/v1"
    username: {{username}}
    password: {{password}}
```
